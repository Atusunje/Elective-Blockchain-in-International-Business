{
  "hash": "e70c4e4452a84e0d9981b9325ff674b1",
  "result": {
    "markdown": "---\ntitle: \"Derivatives \\U0001F914\"\n---\n\nSee book [section](https://learning.oreilly.com/library/view/essential-math-for/9781098102920/ch01.html#idm45252826120304){target=\"_blank\"}\n\n\n```{=html}\n<div class=\"ratio ratio-16x9 m-5 w-75\">\n<iframe src=\"https://www.youtube.com/embed/9vKqVkMQHKk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n</iframe>\n</div>\n```\n\nIn mathematics, the derivative is a fundamental concept in calculus, describing the rate of change of a function at a particular point. Essentially, it gives you the \"slope\" of the function at that point. The concepts of partial derivatives and chain rule further extend this foundational concept.\n\n**Basic Understanding**\n\nThe derivative of a function $f(x)$ is given by the limit:\n\n$f'(x) = \\mathop {\\lim }\\limits_{h \\to 0} \\frac{f(x + h) - f(x)}{h}$\n\nIn Python, we can approximate this as follows:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\ndef derivative(f, x, h=0.00001):\n    return (f(x + h) - f(x)) / h\n```\n:::\n\n\nThis function can be used to find the derivative of a function at a given point. For example, if you have a function $f(x) = x^2$, you can find the derivative at $x=2$ like so:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef f(x):\n    return x**2\n\nprint(derivative(f, 2))  # Output: 4.00001\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4.000010000027032\n```\n:::\n:::\n\n\nThe derivative of $x^2$ is $2x$, so at $x=2$, the derivative is $4$. The output $4.00001$ is slightly higher due to the approximation.\n\n*Can you check the derivative of $f(x) = e^x$?*\n\n**Partial Derivatives**\n\nA partial derivative is like a normal derivative but it's used for functions with more than one variable. We consider one variable at a time and treat all other variables as constants.\n\nFor example, consider the function $f(x, y) = x^2 + y^2$. The partial derivative of $f$ with respect to $x$ (denoted as $\\frac{\\partial f}{\\partial x}$) is $2x$, and the partial derivative with respect to $y$ (denoted as $\\frac{\\partial f}{\\partial y}$) is $2y$.\n\nIn Python, you can approximate these as follows:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef partial_derivative(f, x, y, h=0.00001):\n    df_dx = (f(x + h, y) - f(x, y)) / h\n    df_dy = (f(x, y + h) - f(x, y)) / h\n    return df_dx, df_dy\n\ndef f(x, y):\n    return x**2 + y**2\n\nprint(partial_derivative(f, 2, 3))  # Output: (4.00001, 6.00001)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(4.000010000027032, 6.000009999951316)\n```\n:::\n:::\n\n\n**Chain Rule**\n\nThe chain rule is a principle in calculus used to compute the derivative of a composition of functions. If you have a function composed of several other functions, the derivative of the overall function is the product of the derivatives of the component functions.\n\nFor example, if $y = f(g(h(x)))$, then $dy/dx = f'(g(h(x))) * g'(h(x)) * h'(x)$.\n\nConsider the function $f(x) = (3x + 1)^2$. Here, $f(x)$ is a composition of $u(x) = 3x + 1$ and $v(u) = u^2$.\n\nUsing the chain rule to find the derivative:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndef f(x):\n    return (3*x + 1)**2\n\ndef df(x):\n    return 2 * (3*x + 1) * 3\n\nprint(df(2))  # Output: 42\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n42\n```\n:::\n:::\n\n\nWe found $df/dx = 2*(3x+1)*3$ by applying the chain rule: derivative of $v(u) = u^2$ is $2*u$, and derivative of $u(x) = 3x + 1$ is $3$. Thus, the derivative of $f(x) = (3x + 1)^2$ is $2*(3x+1)*3$.\n\nSo, the derivative of the function at $x=2$ is $42$.\n\n**Real World Applications**\n\n**1. Business Management**\n\nIn business management, derivatives can be used to optimize profit. Assume we have a function representing the profit of a company as a function of the price, $f(p)$. The derivative $f'(p)$ gives the rate of change of profit with respect to the price. If $f'(p) > 0$, producing more units will increase profit, if $f'(p) < 0$, producing more will decrease profit, and if $f'(p) = 0$, we've reached a maximum or minimum point.\n\nTake for instance the function $f(p) = -p^2 + 20p$.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef profit(p):\n    return -p**2 + 20*p\n\nprices = np.linspace(0, 20, 400)\nprofits = profit(prices)\n\nplt.plot(prices, profits)\nplt.title('Profit vs. Price')\nplt.xlabel('Price')\nplt.ylabel('Profit')\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](derivatives_files/figure-html/cell-6-output-1.png){width=593 height=449}\n:::\n:::\n\n\nTo find the price level that maximizes profits, we first obtain the derivative function $f'(p) = -2p + 20$, solve the equation $-2p + 20 = 0$ and check that the optimal price level $p = 10$ results in a profit of $-(10^2) + 20 * 10 =  100$.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nprint(derivative(profit, 10, h=0.00000000001))  # Output: almost zero\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.0\n```\n:::\n:::\n\n\n**2. Engineering**\n\nIn engineering, derivatives are used in areas like dynamics, control systems, and signal processing. For instance, in mechanical engineering, the velocity of an object is the derivative of the object's position with respect to time.\n\n**3. Data Science**\n\nIn data science, derivatives play a critical role in optimization algorithms, such as Gradient Descent used in Machine Learning. The derivative is used to determine the direction to move in the parameter space to minimize a given cost function.\n\nFor example, consider a simple linear regression model with one variable. The cost function $J(m, b)$ for a given slope $m$ and intercept $b$ can be defined as the mean squared error (MSE) between the predicted and actual values. We can use gradient descent to find the $m$ and $b$ that minimize $J(m, b)$, where the derivatives $∂J/∂m$ and $∂J/∂b$ guide the updating process.\n\n------------------------------------------------------------------------\n\n## Assignment {.unnumbered}\n\n**Basic:** Make a short video explaining illustrating the functioning of the chain rule. Start by demonstrating that $(a + b)^2 = a^2 + 2ab + b^2$. For example $(x + 3)^2 = x^2 + 6x + 9$. Use code examples and plots. HINT: revisit the section on [functions](functions.html){target=\"_blank\"}\n\n**Stretch:** Make another video discussing the Gradient Descent algorithm. Implement the algorithm for a simple linear regression model with one variable. The dataset for the assignment is as follows:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nimport numpy as np\n\n# Generate some sample data\nnp.random.seed(0)\nx = np.random.rand(100, 1)\ny = 2 + 3 * x + np.random.rand(100, 1)\n```\n:::\n\n\nYour task is to predict $y$ from $x$ by minimizing the MSE cost function using Gradient Descent. Find the optimal values of $m$ and $b$ and plot the regression line on a scatter plot of $y$ versus $x$.\n\nRemember to start with an initial guess for your parameters (e.g., $m = 0, \\ b = 0$) and update them iteratively using the Gradient Descent update rules:\n\n$m = m - α * ∂J/∂m$\n\n$b = b - α * ∂J/∂b$\n\nWhere $α$ is the learning rate.\n\n**Challenge:** Share your content online (e.g. Linkedin or Medium), gather feedback and write a reflection on it.\n\n",
    "supporting": [
      "derivatives_files"
    ],
    "filters": [],
    "includes": {}
  }
}