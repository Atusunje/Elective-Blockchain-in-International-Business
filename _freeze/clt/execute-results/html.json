{
  "hash": "d1c266a983f6b9c25e2f03283adb4a55",
  "result": {
    "markdown": "---\ntitle: Central Limit Theorem\n---\n\n```{=html}\n<div class=\"ratio ratio-16x9 m-5 w-75\">\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/zeJD6dqJ5lo?si=HRkPZ4kH-RO63LrM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n</div>\n```\n\n**Introduction to the Central Limit Theorem (CLT):**\n\nThe Central Limit Theorem is a fundamental concept in statistics. It states that, regardless of the shape of the original distribution of a large dataset, the distribution of the sample means will approach a normal distribution (bell-shaped curve) as the sample size increases.\n\n**Pascal's Triangle:**\n\nPascal's Triangle is a triangular array of numbers where each number is the sum of the two numbers directly above it. The rows of Pascal's Triangle represent the coefficients in the binomial expansion.\n\n**Example:**\n\nConsider a simple coin toss, where you have two outcomes: heads (H) or tails (T). If you were to toss the coin twice, the possible outcomes are:\n\n1.  HH\n2.  HT\n3.  TH\n4.  TT\n\nNow, let's look at the third row of Pascal's Triangle:\n\n```         \n    1\n   1 1\n  1 2 1\n```\n\nThe third row (1, 2, 1) represents the number of ways to get 0, 1, or 2 heads when tossing the coin twice:\n\n1.  0 heads: TT (1 way)\n2.  1 head: HT or TH (2 ways)\n3.  2 heads: HH (1 way)\n\nAs you can see, the coefficients in Pascal's Triangle (1, 2, 1) directly correspond to the number of ways each outcome can occur in our coin toss example.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\ndef generate_pascals_triangle(n):\n    \"\"\"Generate Pascal's Triangle up to n rows.\"\"\"\n    triangle = []\n    \n    for i in range(n):\n        if i == 0:\n            triangle.append([1])\n        else:\n            prev_row = triangle[i-1]\n            new_row = [1]  # Start with a 1\n            \n            # Calculate the middle values based on the previous row\n            for j in range(len(prev_row) - 1):\n                new_row.append(prev_row[j] + prev_row[j+1])\n                \n            new_row.append(1)  # End with a 1\n            triangle.append(new_row)\n    \n    return triangle\n\ndef display_triangle(triangle):\n    \"\"\"Display Pascal's Triangle.\"\"\"\n    n = len(triangle)\n    for i in range(n):\n        # Print spaces for formatting\n        print(\" \" * (n - i), end=\"\")\n        \n        # Print the values in the row\n        for value in triangle[i]:\n            print(value, end=\" \")\n        print()  # Move to the next line\n\n# Generate and display Pascal's Triangle for 10 rows\ntriangle = generate_pascals_triangle(10)\ndisplay_triangle(triangle)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          1 \n         1 1 \n        1 2 1 \n       1 3 3 1 \n      1 4 6 4 1 \n     1 5 10 10 5 1 \n    1 6 15 20 15 6 1 \n   1 7 21 35 35 21 7 1 \n  1 8 28 56 70 56 28 8 1 \n 1 9 36 84 126 126 84 36 9 1 \n```\n:::\n:::\n\n\nFor our purposes, the key takeaway from Pascal's Triangle is that as you move down the rows, the distribution of numbers starts to resemble a bell-shaped curve, especially when you consider the relative probabilities of each outcome in a binomial experiment. This becomes even more evident as you expand to more coin tosses or, in mathematical terms, higher binomial expansions.\n\n**Galton Board:**\n\nThe Galton Board, also known as a \"bean machine\", is a device that demonstrates the central limit theorem in action. It consists of a vertical board with pegs arranged in a triangular pattern. When a ball is dropped from the top, it bounces off the pegs randomly, either moving left or right, until it reaches the bottom.\n\nAs more and more balls are dropped, they start to form a distribution at the bottom that looks like a bell-shaped curve. This is a visual representation of the normal distribution.\n\n\n```{=html}\n<div id=\"renderHere\" class=\"my-5\"></div>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.9.2/umd/popper.min.js\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.1.0/js/bootstrap.min.js\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/matter-js/0.12.0/matter.js\"></script>\n        <script>\n            var Example = Example || {};\n\n            Example.galton = function () {\n                var Engine = Matter.Engine,\n                    Render = Matter.Render,\n                    Runner = Matter.Runner,\n                    Composite = Matter.Composite,\n                    Composites = Matter.Composites,\n                    Common = Matter.Common,\n                    MouseConstraint = Matter.MouseConstraint,\n                    Mouse = Matter.Mouse,\n                    World = Matter.World,\n                    Bodies = Matter.Bodies;\n\n                // create engine\n                var engine = Engine.create({\n                        enableSleeping: true,\n                    }),\n                    world = engine.world;\n\n                // create renderer\n                var render = Render.create({\n                    element: document.getElementById(\"renderHere\"),\n                    engine: engine,\n                    options: {\n                        width: 500,\n                        height: 830,\n                        wireframes: false,\n                    },\n                });\n\n                Render.run(render);\n\n                // create runner\n                var runner = Runner.create();\n                Runner.run(runner, engine);\n\n                const size = 4;\n\n                // add bodies\n                let total = 1400;\n                setInterval(() => {\n                    if (total-- > 0) {\n                        const circle = Bodies.circle(\n                            250 + (-0.5 + Math.random()),\n                            -20,\n                            size,\n                            {\n                                friction: 0.00001,\n                                restitution: 0.5,\n                                density: 0.001,\n                                frictionAir: 0.042,\n                                sleepThreshold: 25,\n                                render: {\n                                    fillStyle: \"#ff00ff\",\n                                    visible: true,\n                                },\n                            }\n                        );\n\n                        Matter.Events.on(circle, \"sleepStart\", () => {\n                            Matter.Body.setStatic(circle, true);\n                        });\n                        World.add(world, circle);\n                    }\n                }, 10);\n\n                const pegs = [];\n                const spacingY = 35;\n                const spacingX = 40;\n                var i, j, lastI;\n                for (i = 0; i < 13; i++) {\n                    for (j = 1; j < i; j++) {\n                        pegs.push(\n                            Bodies.circle(\n                                250 + (j * spacingX - i * (spacingX / 2)),\n                                i * spacingY,\n                                size,\n                                {\n                                    isStatic: true,\n                                    render: {\n                                        fillStyle: \"#ffffff\",\n                                        visible: true,\n                                    },\n                                }\n                            )\n                        );\n                    }\n                    lastI = i;\n                }\n                for (i = 0; i < 15; i++) {\n                    World.add(\n                        world,\n                        Bodies.rectangle(\n                            110 - spacingX + (j * spacingX - i * spacingX),\n                            lastI * spacingY + 215,\n                            size / 2,\n                            lastI + 300,\n                            {\n                                isStatic: true,\n                                render: {\n                                    fillStyle: \"#ffffff\",\n                                    visible: true,\n                                },\n                                chamfer: {\n                                    radius: [size * 0.4, size * 0.4, 0, 0],\n                                },\n                            }\n                        )\n                    );\n                }\n                World.add(\n                    world,\n                    Bodies.rectangle(250, lastI * 1.33 * spacingY + 257, 1000, 50, {\n                        isStatic: true,\n                        render: {\n                            fillStyle: \"#ffffff\",\n                            visible: true,\n                        },\n                    })\n                );\n\n                World.add(world, pegs);\n\n                return {\n                    engine: engine,\n                    runner: runner,\n                    render: render,\n                    canvas: render.canvas,\n                    stop: function () {\n                        Matter.Render.stop(render);\n                        Matter.Runner.stop(runner);\n                    },\n                };\n            };\n\n            Example.galton();\n        </script>\n```\n\n**Connecting the Dots:**\n\n-   **Pascal's Triangle & Galton Board**: The progression of rows in Pascal's Triangle can be thought of as the journey of a ball in the Galton Board. As you move down the rows in Pascal's Triangle, the distribution of numbers (and their associated probabilities) starts to look like the distribution of balls in the Galton Board. Both show a tendency towards a bell-shaped curve as the number of trials or steps increases.\n\n-   **Central Limit Theorem**: Just as the distribution of balls in the Galton Board approaches a normal distribution with more trials, the CLT tells us that the distribution of sample means will also approach a normal distribution as the sample size increases, regardless of the shape of the original distribution.\n\n**Relevance to Business Management:**\n\nFor a Business Management student, understanding the Central Limit Theorem is crucial for making informed decisions based on data. For instance, when analyzing customer feedback, sales data, or employee performance, the CLT can provide insights into the overall trend and allow for better forecasting and decision-making.\n\n**Conclusion:**\n\nIn essence, both Pascal's Triangle and the Galton Board visually demonstrate the essence of the Central Limit Theorem. They show that as we increase the number of trials or samples, the distribution tends towards a predictable bell-shaped curve, which is foundational in many areas of business analytics and decision-making.\n\n",
    "supporting": [
      "clt_files"
    ],
    "filters": [],
    "includes": {}
  }
}