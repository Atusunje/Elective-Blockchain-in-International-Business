{
  "hash": "740966bb62f7606ff37dbfe3c9873306",
  "result": {
    "markdown": "---\ntitle: Functions\n---\n\nSee book [section](https://learning.oreilly.com/library/view/essential-math-for/9781098102920/ch01.html#idm45252829259280){target=\"_blank\"}\n\n\n```{=html}\n<div class=\"ratio ratio-16x9 m-5 w-75\">\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kvGsIo1TmsM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\n\n</iframe>\n\n</div>\n```\n\n\n**Relationship Between Mathematical Functions and Functions in Python**\n\nMathematical functions and functions in Python share some fundamental concepts, but they are implemented and used in different ways. Understanding their relationship can help us leverage the power of Python libraries like SymPy for symbolic mathematics and visualization libraries for plotting.\n\n**1. Mathematical Functions:**\n\nIn mathematics, functions are a fundamental concept that relates an input (or a set of inputs) to an output. A mathematical function typically takes one or more variables as inputs and produces a single output. Functions are often denoted by symbols like $f(x)$ or $g(x, y)$.\n\n**Example: Mathematical Function**\n\n$$f(x) = x^2 + 6x + 9$$\n\n**2. Functions in Python:**\n\nIn Python, functions are blocks of code that perform a specific task. They can take input arguments and return a result. Python functions can be defined using the `def` keyword and can be called multiple times within a program.\n\n**Example: Python Function**\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\ndef f(x):\n    return x**2 + 6*x + 9\n```\n:::\n\n\n**3. Using SymPy for Symbolic Mathematics:**\n\nSymPy is a Python library for symbolic mathematics. It allows us to work with mathematical expressions in symbolic form, just like we do in mathematics. SymPy functions can be used to manipulate and simplify algebraic expressions.\n\n**Example 1: Plotting a Mathematical Function**\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfrom sympy import *\n\nx = symbols('x')\nf = x**2 + 6*x + 9\n\nplot(f, ylim=(-50, 175))\n```\n\n::: {.cell-output .cell-output-display}\n![](functions_files/figure-html/cell-3-output-1.png){width=662 height=470}\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n<sympy.plotting.plot.Plot at 0x1051ed6d0>\n```\n:::\n:::\n\n\n**Example 2: Plotting Multiple Mathematical Functions**\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nfd = 20*x - 40\n\nplot(f, fd, ylim=(-50, 175))\n```\n\n::: {.cell-output .cell-output-display}\n![](functions_files/figure-html/cell-4-output-1.png){width=662 height=470}\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n<sympy.plotting.plot.Plot at 0x1051ed460>\n```\n:::\n:::\n\n\n**Example 3: Plotting Multiple Mathematical Functions**\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ng = sin(x)\nh = sin(x - pi)\ngh = g+h\n\nplot(g, h, gh, (x, -2*pi, 2*pi), ylim=(-1, 1))\n```\n\n::: {.cell-output .cell-output-display}\n![](functions_files/figure-html/cell-5-output-1.png){width=662 height=470}\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n<sympy.plotting.plot.Plot at 0x127467400>\n```\n:::\n:::\n\n\n**Conclusion:**\n\nThe relationship between mathematical functions and functions in Python revolves around the idea of relating inputs to outputs. Python provides a practical and versatile environment for working with functions, and libraries like SymPy and Matplotlib enhance the capabilities to handle symbolic mathematics and create visual representations of functions. By understanding this relationship, you can leverage Python's functionality for mathematical computations and visualization, making it a powerful tool for various scientific and engineering tasks.\n\n",
    "supporting": [
      "functions_files"
    ],
    "filters": [],
    "includes": {}
  }
}